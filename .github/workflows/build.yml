name: Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    paths:
      - 'packages/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/build.yml'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Detect which packages have changes
  changes:
    runs-on: ubuntu-latest
    outputs:
      viewer: ${{ steps.changes.outputs.viewer }}
      site: ${{ steps.changes.outputs.site }}
      data: ${{ steps.changes.outputs.data }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            viewer:
              - 'packages/viewer/**'
            site:
              - 'packages/site/**'
            data:
              - 'packages/data/**'

  # Build matrix for each package
  build:
    needs: changes
    if: needs.changes.outputs.viewer == 'true' || needs.changes.outputs.site == 'true' || needs.changes.outputs.data == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - app: viewer
            needs_build: ${{ needs.changes.outputs.viewer == 'true' }}
            build_script: "pnpm -w build:viewer"
            artifact_path: "packages/viewer/dist"
            test_script: "pnpm -F @passport/viewer test"
            bundle_check: true
          - app: site
            needs_build: ${{ needs.changes.outputs.site == 'true' }}
            build_script: "pnpm -w build:site"
            artifact_path: "packages/site/public"
            test_script: ""
            bundle_check: false
          - app: data
            needs_build: ${{ needs.changes.outputs.data == 'true' }}
            build_script: "pnpm -w build:data"
            artifact_path: "packages/data/public"
            test_script: ""
            bundle_check: false
    
    steps:
      - name: Skip if no changes
        if: matrix.needs_build != 'true'
        run: |
          echo "No changes detected for ${{ matrix.app }}, skipping build"
          exit 0
          
      - uses: actions/checkout@v4
        if: matrix.needs_build == 'true'
        
      - name: Setup Node.js
        if: matrix.needs_build == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install pnpm
        if: matrix.needs_build == 'true'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        if: matrix.needs_build == 'true'
        run: pnpm install --frozen-lockfile
        
      - name: Run tests
        if: matrix.needs_build == 'true' && matrix.test_script != ''
        run: ${{ matrix.test_script }}
        
      - name: Build package
        if: matrix.needs_build == 'true'
        run: ${{ matrix.build_script }}
        env:
          NODE_ENV: production
          
      - name: Validate bundle size (viewer only)
        if: matrix.needs_build == 'true' && matrix.bundle_check == true
        run: |
          echo "Bundle size validation included in build script"
          # The validation is already part of the viewer build script
          
      - name: Generate build info
        if: matrix.needs_build == 'true'
        run: |
          mkdir -p build-info
          echo "{
            \"app\": \"${{ matrix.app }}\",
            \"version\": \"$(node -p \"require('./package.json').version\")\",
            \"commit\": \"${{ github.sha }}\",
            \"branch\": \"${{ github.ref_name }}\",
            \"build_time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"workflow_run\": \"${{ github.run_id }}\"
          }" > build-info/${{ matrix.app }}-build.json
          
      - name: Prepare Coolify artifacts
        if: matrix.needs_build == 'true'
        run: |
          # Create deployment-ready structure
          mkdir -p coolify-artifacts/${{ matrix.app }}
          
          # Copy build artifacts
          if [ -d "${{ matrix.artifact_path }}" ]; then
            cp -r ${{ matrix.artifact_path }}/* coolify-artifacts/${{ matrix.app }}/
          fi
          
          # Add build info
          cp build-info/${{ matrix.app }}-build.json coolify-artifacts/${{ matrix.app }}/build-info.json
          
          # Copy Dockerfile and nginx config if they exist
          if [ -f "packages/${{ matrix.app }}/Dockerfile" ]; then
            cp packages/${{ matrix.app }}/Dockerfile coolify-artifacts/${{ matrix.app }}/
          fi
          if [ -f "packages/${{ matrix.app }}/nginx.conf" ]; then
            cp packages/${{ matrix.app }}/nginx.conf coolify-artifacts/${{ matrix.app }}/
          fi
          
          # Create health check endpoint for non-static apps
          if [ "${{ matrix.app }}" != "viewer" ]; then
            echo '{"status":"ok","app":"${{ matrix.app }}","version":"'$(node -p "require('./package.json').version")'"}' > coolify-artifacts/${{ matrix.app }}/health.json
          fi
          
      - name: Upload build artifacts
        if: matrix.needs_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build-${{ github.sha }}
          path: coolify-artifacts/${{ matrix.app }}
          retention-days: 30
          compression-level: 6
          
      - name: Upload build info
        if: matrix.needs_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build-info-${{ github.sha }}
          path: build-info/${{ matrix.app }}-build.json
          retention-days: 7
          
  # E2E tests for viewer (only if viewer changed)
  e2e-tests:
    needs: [changes, build]
    if: needs.changes.outputs.viewer == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download viewer build artifacts
        uses: actions/download-artifact@v4
        with:
          name: viewer-build-${{ github.sha }}
          path: packages/viewer/dist
          
      - name: Install Playwright Browsers
        run: pnpm -F @passport/viewer test:e2e:install
        
      - name: Run E2E tests
        run: pnpm -F @passport/viewer test:e2e
        
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.sha }}
          path: packages/viewer/playwright-report/
          retention-days: 14
          
  # Summary job for status checks
  build-summary:
    needs: [changes, build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check build results
        run: |
          echo "Build Summary:"
          echo "=============="
          
          if [ "${{ needs.changes.outputs.viewer }}" == "true" ]; then
            echo "✓ Viewer: Changes detected and built"
          else
            echo "- Viewer: No changes"
          fi
          
          if [ "${{ needs.changes.outputs.site }}" == "true" ]; then
            echo "✓ Site: Changes detected and built"
          else
            echo "- Site: No changes"
          fi
          
          if [ "${{ needs.changes.outputs.data }}" == "true" ]; then
            echo "✓ Data: Changes detected and built"
          else
            echo "- Data: No changes"
          fi
          
          # Check if any builds failed
          if [ "${{ needs.build.result }}" == "failure" ]; then
            echo "❌ Build failed"
            exit 1
          elif [ "${{ needs.build.result }}" == "success" ] || [ "${{ needs.build.result }}" == "skipped" ]; then
            echo "✅ All builds successful"
          else
            echo "⚠️  Build status: ${{ needs.build.result }}"
          fi